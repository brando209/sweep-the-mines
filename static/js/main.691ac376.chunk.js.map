{"version":3,"sources":["logo.svg","components/input/Select/Select.js","components/Cell/Cell.js","utility/grid/grid.js","assets/bomb.png","assets/blue-flag.png","components/Grid/Grid.js","components/Overlay/Overlay.js","App.js","reportWebVitals.js","index.js"],"names":["Select","name","label","children","onSelect","props","htmlFor","onChange","e","target","value","Cell","display","onClick","displayComponent","src","alt","className","onContextMenu","preventDefault","data-testid","DIFFICULTY","GRID_VALUE","neighbors","generateInitialGrid","difficulty","bombLocationsInRow","isBombLocation","size","getGridSize","bombCount","getTotalBombCount","bombLocations","generateUniqueTuples","grid","i","filter","bomb","x","row","j","find","y","push","isBomb","updateGrid","rowIdx","colIdx","Q","visited","Map","set","shift","neighborBombCount","forEach","neighbor","countNeighboringBombs","gridSize","neighborIndices","xIdx","yIdx","getNeighborIndices","length","has","n","max","map","tuples","Math","floor","random","sort","a","b","Grid","gridDifficulty","resetToggle","onGameOver","useState","setGrid","end","setEnd","useEffect","win","cell","values","split","checkWin","lose","checkLose","prevGrid","handleCellClick","type","flagIcon","newValue","toggleFlag","flag","Overlay","active","render","App","setDifficulty","setResetToggle","overlay","setOverlay","handleGameOver","useMemo","overlayRender","endCondition","style","cursor","handleReset","prev","logo","selection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.691ac376.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n\nexport default function Select({ name, label, children, onSelect, ...props }) {\n    return (\n        <div {...props}>\n            <label htmlFor={name}>{label}</label>\n            <select name={name} onChange={(e) => onSelect(e.target.value)}>\n                {children}\n            </select>\n        </div>\n    )\n}","import React from 'react';\nimport './Cell.css';\n\nexport default function Cell({ value, display = \"\", onClick, ...props }) {\n    const handleLeftClick = () => {\n        onClick('left');\n    }\n\n    const handleRightClick = (e) => {\n        e.preventDefault();\n        onClick('right');\n    }\n\n    let displayComponent = null;\n    if(typeof display === \"string\" || typeof display === \"number\") {\n        displayComponent = display;\n    } else {\n        displayComponent = <img src={display.src} alt=\"\" />\n    }\n\n    return (\n        <div \n            className={`cell ${value}`} \n            onClick={handleLeftClick} \n            onContextMenu={handleRightClick} \n            data-testid=\"cell-element\"\n            { ...props } \n        >\n            {displayComponent}\n        </div>\n    )\n}","export const DIFFICULTY = {\n    EASY: 'easy',\n    MEDIUM: 'medium',\n    HARD: 'hard',\n}\n\nexport const GRID_VALUE = {\n    UNSELECTED: 'unselected',\n    SELECTED: 'selected',\n    FLAGGED: 'flagged',\n    BOMBED: 'bombed',\n}\n\nconst neighbors = [\n    [-1, -1], [0, -1], [1, -1],\n    [-1,  0],          [1,  0],\n    [-1,  1], [0,  1], [1,  1]\n]\n\nexport const getTotalBombCount = (difficulty) => {\n    if(difficulty === DIFFICULTY.EASY) return 15;\n    if(difficulty === DIFFICULTY.MEDIUM) return 40;\n    if(difficulty === DIFFICULTY.HARD) return 60;\n}\n\nexport const getGridSize = (difficulty) => {\n    if (difficulty === \"hard\") return 20;\n    if (difficulty === \"medium\") return 15;\n    return 10;\n}\n\nexport const countNeighboringBombs = (grid, rowIdx, colIdx) => {\n    let bombCount = 0;\n    neighbors.forEach(neighbor => {\n        const neighborExists = grid[(rowIdx + neighbor[0])] && grid[(rowIdx + neighbor[0])][(colIdx + neighbor[1])];\n        const neighborIsBomb = neighborExists && grid[(rowIdx + neighbor[0])][(colIdx + neighbor[1])].isBomb;\n        if(neighborIsBomb) {\n            bombCount++;\n        }\n    });\n    return bombCount;\n}\n\nexport const getNeighborIndices = (gridSize, rowIdx, colIdx) => {\n    const neighborIndices = [];\n    for(let neighbor of neighbors) {\n        const xIdx = rowIdx + neighbor[0];\n        const yIdx = colIdx + neighbor[1];\n        if(xIdx >= 0 && xIdx < gridSize && yIdx >= 0 && yIdx < gridSize) neighborIndices.push([xIdx, yIdx]);\n    }\n    return neighborIndices;\n}\n\nexport const generateInitialGrid = (difficulty) => {\n    const size = getGridSize(difficulty);\n    const bombCount = getTotalBombCount(difficulty);\n    const bombLocations = generateUniqueTuples(bombCount, size);\n    let bombLocationsInRow, isBombLocation;\n    const grid = [];\n    for(let i = 0; i < size; i++) {\n        bombLocationsInRow = bombLocations.filter(bomb => bomb.x === i);\n        const row = [];\n        for(let j = 0; j < size; j++) {\n            isBombLocation = bombLocationsInRow.find(bomb => bomb.y === j) ? true : false;\n            row.push({ value: GRID_VALUE.UNSELECTED, isBomb: isBombLocation });\n        }\n        grid.push(row);\n    }\n    return grid;\n}\n\n    /*\n        =========================================\n        GRID UPDATE ALGORITHM\n        =========================================\n        INPUTS: \n            grid, the current state of the grid\n            rowIdx, the row index of the selected cell\n            colIdx, the column index of the selected cell\n        OUTPUT:\n            grid, the updated state of the grid\n\n        PROCEDURE:\n            1. Let C = the cell at grid[rowIdx][colIdx].\n            2. IF C is a bomb, game over. ELSE continue to step 3.\n            3. Initialize a queue, Q, and a hash map, visited\n            4. Count the number of neighboring bombs to C.\n                4.1 IF the number of neighboring bombs is not zero, display the neighboring bomb count on C\n                    and let C.value = \"selected\".\n                4.2 ELSE display a blank on C, let C.value = \"selected\", and push all neighbors of C onto Q \n                    (which are not \"selected\" and do not exist in visited) and create entry in visited\n                    4.2.1 IF Q is empty, grid is updated\n                    4.2.2 ELSE let C = Q.pop()\n                        4.2.2.1 Repeat step 4.\n    */\n\nexport const updateGrid = (grid, rowIdx, colIdx) => {\n    let currentCell = grid[rowIdx][colIdx];\n    if(currentCell.isBomb) { \n        grid[rowIdx] = [...grid[rowIdx]];  //DO NOT MUTATE ROW, MAKE COPY\n        grid[rowIdx][colIdx] = { ...grid[rowIdx][colIdx], value: GRID_VALUE.SELECTED + \" \" + GRID_VALUE.BOMBED }\n        return grid; \n    }\n\n    const Q = [];   //Very slow as a queue for large amount of items\n    Q.push([rowIdx, colIdx]);\n\n    const visited = new Map();\n    visited.set(`(${rowIdx},${colIdx})`, true);\n\n    while(Q.length > 0) {\n        let [x, y] = Q.shift();\n        let neighborIndices;\n        let neighborBombCount = countNeighboringBombs(grid, x, y);\n        grid[x] = [...grid[x]] //DO NOT MUTATE ROW, MAKE COPY\n        if(neighborBombCount > 0) {\n            grid[x][y] = { ...grid[x][y], value: \"selected\", display: neighborBombCount };\n        } else {\n            grid[x][y] = { ...grid[x][y], value: \"selected\", display: \" \" };\n            neighborIndices = getNeighborIndices(grid.length, x, y);\n            neighborIndices.forEach(neighbor => {\n                if(neighbor.value !== \"selected\" && !visited.has(`(${neighbor[0]},${neighbor[1]})`)) {\n                    Q.push(neighbor);\n                    visited.set(`(${x},${y})`, true);\n                } \n            });\n        }   \n    }\n\n    return grid;\n}\n\nexport const toggleFlag = (grid, rowIdx, colIdx, flagIcon) => {\n    if(grid[rowIdx][colIdx].value === GRID_VALUE.SELECTED) return grid;\n    const newValue = (grid[rowIdx][colIdx].value === GRID_VALUE.UNSELECTED) ? GRID_VALUE.FLAGGED : GRID_VALUE.UNSELECTED;\n    const display = (newValue === GRID_VALUE.FLAGGED) ? { src: flagIcon } : \"\";\n    grid[rowIdx] = [...grid[rowIdx]];   //DO NOT MUTATE ROW, MAKE COPY\n    grid[rowIdx][colIdx] = { ...grid[rowIdx][colIdx], value: newValue, display: display }\n    return grid;\n}\n\nexport const checkWin = (grid) => {\n    let win = true;\n    for(let row of grid) {\n        for(let cell of row) {\n            let values = cell.value.split(' ');\n            for(let value of values) {\n                if(value === GRID_VALUE.UNSELECTED || (value === GRID_VALUE.FLAGGED && cell.isBomb === false)) {\n                    win = false;\n                    break;\n                }\n            }\n            if(!win) break;\n        };\n        if(!win) break;\n    };\n    return win;\n}\n\nexport const checkLose = (grid) => {\n    let lose = false;\n    for(let row of grid) {\n        for(let cell of row) {\n            let values = cell.value.split(' ');\n            for(let value of values) {\n                if(value === GRID_VALUE.BOMBED && cell.isBomb === true) {\n                    lose = true;\n                    break;\n                }\n            }\n            if(lose) break;\n        };\n        if(lose) break;\n    };\n    return lose;\n}\n\n// Generates n unique tuples with values in range [0,max)\nexport const generateUniqueTuples = (n, max) => {\n    if(n > max * max || n <= 0) return []; //Cannot generate more then max*max unique tuples, or negative amount\n\n    const map = new Map();\n    const tuples = [];\n    \n    while(tuples.length < n) {\n        let x, y;\n        do {\n            x = Math.floor(Math.random() * max);\n            y = Math.floor(Math.random() * max);\n            if(!map.has(`(${x},${y})`)) {\n                map.set(`(${x},${y})`, true);\n                tuples.push({ x, y });\n            }\n        } while(!map.has(`(${x},${y})`))\n    }\n\n    //Sort by x first, then y\n    tuples.sort((a, b) => {\n        if(a.x === b.x) {\n            return (a.y > b.y) ? -1 : 1;\n        }\n        return (a.x > b.x) ? -1 : 1;\n    });\n\n    return tuples;\n}","export default __webpack_public_path__ + \"static/media/bomb.f525e4e1.png\";","export default __webpack_public_path__ + \"static/media/blue-flag.ccbeceae.png\";","import React, { useEffect, useState } from 'react';\n\nimport Cell from '../Cell/Cell';\nimport { generateInitialGrid, updateGrid, toggleFlag, checkWin, checkLose, GRID_VALUE } from '../../utility/grid/grid';\nimport './Grid.css';\n\nimport bomb from '../../assets/bomb.png';\nimport flag from '../../assets/blue-flag.png';\n\nexport default function Grid({ gridDifficulty, resetToggle, onGameOver }) {\n    const [grid, setGrid] = useState(generateInitialGrid(gridDifficulty));\n    const [end, setEnd] = useState(false);\n    \n    useEffect(() => {\n        if(checkWin(grid)) onGameOver(true);\n        if(checkLose(grid)) {\n            setEnd(true);\n            onGameOver(false);\n        }\n    }, [grid, onGameOver]);\n\n    useEffect(() => {\n        end && exposeBombs();\n    }, [end]);\n\n    useEffect(() => {\n        setGrid(generateInitialGrid(gridDifficulty));\n        setEnd(false);\n    }, [gridDifficulty, resetToggle]);\n\n    function exposeBombs() {\n        setGrid(prevGrid => {\n            return prevGrid.map(row => (\n                row.map(cell => {\n                    if(cell.isBomb) return { ...cell, value: GRID_VALUE.SELECTED + \" \" + GRID_VALUE.BOMBED, display: { src: bomb }};\n                    else return cell;\n                })\n            ))\n        })\n    }\n\n    const handleCellClick = (type, rowIdx, colIdx) => {\n        setGrid(prevGrid => {\n            if(type === \"right\"){\n                return toggleFlag([...prevGrid], rowIdx, colIdx, flag);\n            }\n            return updateGrid([...prevGrid], rowIdx, colIdx,);\n        });\n    }\n\n    return (\n        <div className={`grid ${gridDifficulty}`}>\n            {grid.map((row, i) => (\n                <div \n                    className=\"grid-row\" \n                    key={`grid-row-${i}`}\n                    data-testid=\"grid-row-element\"\n                >\n                    {row.map((cell, j) => (\n                        <Cell \n                            key={`cell-${i}-${j}`} \n                            value={cell.value}\n                            display={cell.display}\n                            onClick={(type) => handleCellClick(type, i, j)} \n                        />\n                    ))}\n                </div>\n            ))}\n        </div>\n    )\n}","import React from 'react';\nimport './Overlay.css';\n\nexport default function Overlay(props) {\n    return (\n        <div className={`overlay${props.active ? \" active\" : \"\"}`}>\n            <div className=\"overlay-render\">\n                {props.render && props.render()}\n            </div>\n            <div className=\"overlay-children\">\n                {props.children}\n            </div>\n        </div>\n    );\n}","import { useMemo, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Select from './components/input/Select/Select';\nimport Grid from './components/Grid/Grid';\n\nimport { DIFFICULTY } from './utility/grid/grid';\nimport Overlay from './components/Overlay/Overlay';\n\nfunction App() {\n  const [difficulty, setDifficulty] = useState(DIFFICULTY.EASY);\n  const [resetToggle, setResetToggle] = useState(false);\n  const [overlay, setOverlay] = useState({ active: false, render: null });\n\n  const handleGameOver = useMemo(() => ((win) => {\n    const overlayRender = (endCondition) => {\n      return () => (\n        <div>\n          {`You ${endCondition}!`}\n          <div style={{ cursor: \"pointer\" }} onClick={handleReset}>Reset</div>\n        </div>\n      );\n    }\n\n    if(win) {\n      setOverlay({ active: true, render: overlayRender(\"WIN!\")})\n    } else {\n      setOverlay({ active: true, render: overlayRender(\"Lose\")})\n    }\n  }), []);\n\n  const handleSelectDifficulty = (selection) => {\n    setDifficulty(selection);\n    setOverlay({ active: false, render: null });\n  }\n\n  const handleReset = () => {\n    setResetToggle(prev => !prev);\n    setOverlay({ active: false, render: null });\n  }\n\n  return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Minesweeper</p>\n          <button className=\"reset-button\" onClick={handleReset}>Reset</button>\n          <Select className=\"difficulty-select\" name=\"difficulty\" label=\"Difficulty: \" onSelect={handleSelectDifficulty}>\n            <option key=\"easy\" value={DIFFICULTY.EASY}>Easy</option>\n            <option key=\"med\" value={DIFFICULTY.MEDIUM}>Medium</option>\n            <option key=\"hard\" value={DIFFICULTY.HARD}>Hard</option>\n          </Select>\n        </header>\n        <Overlay active={overlay.active} render={overlay.render}>\n          <div className=\"App-content\">\n            <Grid gridDifficulty={difficulty} resetToggle={resetToggle} onGameOver={handleGameOver}/>\n          </div>\n        </Overlay>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}